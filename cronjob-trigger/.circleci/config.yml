version: 2

## Definitions
build_allways: &build_allways
  filters:
    tags:
      only: /.*/
defaults: &defaults
  working_directory: /home/circleci/.go_workspace/src/github.com/kubeless/cronjob-trigger
  environment:
    GOPATH: /home/circleci/.go_workspace
    CRONJOB_CONTROLLER_IMAGE_NAME: kubeless/cronjob-trigger-controller
    CGO_ENABLED: "0"
    TEST_DEBUG: "1"
    MINIKUBE_VERSION: v1.2.0
    KUBELESS_MANIFESTS: kubeless kubeless-non-rbac
    GO111MODULE: "on"
exports: &exports
  # It is not possible to resolve env vars in the environment section:
  # https://discuss.circleci.com/t/using-environment-variables-in-config-yml-not-working/14237
  run: |
    CONTROLLER_TAG=${CIRCLE_TAG:-build-$CIRCLE_WORKFLOW_ID}
    echo "export CONTROLLER_TAG=${CONTROLLER_TAG}" >> $BASH_ENV
    echo "export CRONJOB_CONTROLLER_IMAGE=${CRONJOB_CONTROLLER_IMAGE_NAME}:${CONTROLLER_TAG}" >> $BASH_ENV
    echo "export KUBECFG_JPATH=/home/circleci/src/github.com/kubeless/cronjob-trigger/ksonnet-lib" >> $BASH_ENV
    echo "export PATH=$(pwd)/bats/libexec:$PATH" >> $BASH_ENV
restore_workspace: &restore_workspace
  run: |
    make bootstrap
    sudo cp -r /tmp/go/bin/* /usr/local/bin/
    cp -r /tmp/go/src/github.com/kubeless/cronjob-trigger/build-manifests/*yaml .
should_test: &should_test
  run: |
    case $CIRCLE_JOB in
    # In kase of minikube+CronJob trigger controller we want to test it if
    # it is a Pull Request related to CronJob trigger (discovered from the PR title)
    # or if the build is from the "master" branch
    minikube_cronjob)
      if [[ -n "$CIRCLE_PULL_REQUESTS" ]]; then
        pr_cronjob_trigger__title=$(curl -H "Authorization: token $ACCESS_TOKEN" "https://api.github.com/repos/$TRAVIS_REPO_SLUG/pulls/${TRAVIS_PULL_REQUEST}" | grep title || true)
      fi
      if [[ -z "$CIRCLE_PULL_REQUESTS" || "$pr_cronjob_trigger__title=" == "" || "$pr_cronjob_trigger__title=" =~ ^.*(http|HTTP).*$ ]]; then
        export SHOULD_TEST=1
      fi
      ;;      
    esac
    echo "Should test? $SHOULD_TEST"
    if [[ "$SHOULD_TEST" != "1" ]]; then
      circleci step halt
    fi
#### End of definitions

workflows:
  version: 2
  kubeless:
    jobs:
      - build:
          <<: *build_allways
      - minikube_core_triggers:
          <<: *build_allways
          requires:
            - build
      - push_latest_images:
          filters:
            branches:
              only: master
          requires:
            - minikube_core_triggers
      - release:
          filters:
            tags:
              only: /v.*/
            branches:
              ignore: /.*/
          requires:
            - minikube_core_triggers
jobs:
  build:
    <<: *defaults
    docker:
      - image: circleci/golang:1.12 
    steps:
      - checkout
      - <<: *exports
      - run: make bootstrap
      - run: mkdir build-manifests
      # Install kubeless required files
      - run: |
          git clone https://github.com/kubeless/kubeless.git $GOPATH/src/github.com/kubeless/kubeless
          ln -s $(pwd)/ksonnet-lib $GOPATH/src/github.com/kubeless/kubeless/ksonnet-lib
          cd $GOPATH/src/github.com/kubeless/kubeless
          make binary
          make all-yaml
          mkdir build-manifests
          # Replace the controller version that is included in the main Kubeless manifest
          IFS=' ' read -r -a manifests <<< "$KUBELESS_MANIFESTS"
          for f in "${manifests[@]}"; do
            sed -E -i.bak 's/image: .*\/cronjob-trigger-controller:.*/image: kubeless\/cronjob-trigger-controller:'"${CONTROLLER_TAG}"'/g' ${f}.yaml
            cp ${f}.yaml $GOPATH/src/github.com/kubeless/cronjob-trigger/build-manifests/
          done
          cd -
      - run: make VERSION=${CONTROLLER_TAG} binary
      - run: make test
      - run: make validation
      - persist_to_workspace:
          root: /home/circleci/.go_workspace
          paths: 
            - bin
            - src/github.com/kubeless/cronjob-trigger/build-manifests/*yaml
      - store_artifacts:
          path: /home/circleci/.go_workspace/bin/kubeless
      - store_artifacts:
          path: build-manifests
  minikube_core_triggers:
    <<: *defaults
    machine:
      image: ubuntu-1604:201903-01
    steps:
      - checkout
      - <<: *exports
      - attach_workspace:
          at: /tmp/go
      - <<: *restore_workspace
      - run: sudo apt-get update -y
      - run: sudo apt-get install -y apache2-utils
      - run: ./script/pull-or-build-image.sh cronjob-controller-image
      - run: ./script/integration-tests minikube deployment
      - run: ./script/integration-tests minikube cronjob
  push_latest_images:
    <<: *defaults
    docker:
      - image: circleci/golang:1.12 
    steps:
      - <<: *exports
      - setup_remote_docker
      - run: docker login -u="$DOCKER_USERNAME" -p="$DOCKER_PASSWORD"   
      - run: |
          images=( 
            $CRONJOB_CONTROLLER_IMAGE_NAME
          )
          for image in "${images[@]}"; do
            echo "Pulling ${image}:${CONTROLLER_TAG}"
            docker pull ${image}:${CONTROLLER_TAG}
            docker tag ${image}:${CONTROLLER_TAG} ${image}:latest
            docker push ${image}:latest
          done
  release:
    <<: *defaults
    docker:
      - image: circleci/golang:1.12 
    steps:
      - <<: *exports
      - checkout
      - attach_workspace:
          at: /tmp/go
      - <<: *restore_workspace
      - run: ./script/create_release.sh ${CIRCLE_TAG}
